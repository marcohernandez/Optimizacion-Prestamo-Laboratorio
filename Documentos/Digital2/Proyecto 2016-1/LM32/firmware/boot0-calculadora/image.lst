
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000074  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000224  000005f4  000005f4  00000668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000818  00000818  0000088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00000828  00000828  0000089c  2**2
                  ALLOC
  4 .debug_abbrev 000001a0  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d0  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000565  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000027a  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000fa  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000201  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000005a  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 08 30 	ori gp,gp,0x830
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 08 28 	ori r1,r1,0x828
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 08 2c 	ori r3,r3,0x82c

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 0c 	calli 8c <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <main>:
	#define enter 13
	#define min_num 47
	#define max_num 58
	#define const_res 48

int main(int argc, char **argv){
  8c:	37 9c ff bc 	addi sp,sp,-68
  90:	5b 8b 00 44 	sw (sp+68),r11
  94:	5b 8c 00 40 	sw (sp+64),r12
  98:	5b 8d 00 3c 	sw (sp+60),r13
  9c:	5b 8e 00 38 	sw (sp+56),r14
  a0:	5b 8f 00 34 	sw (sp+52),r15
  a4:	5b 90 00 30 	sw (sp+48),r16
  a8:	5b 91 00 2c 	sw (sp+44),r17
  ac:	5b 92 00 28 	sw (sp+40),r18
  b0:	5b 93 00 24 	sw (sp+36),r19
  b4:	5b 94 00 20 	sw (sp+32),r20
  b8:	5b 95 00 1c 	sw (sp+28),r21
  bc:	5b 96 00 18 	sw (sp+24),r22
  c0:	5b 97 00 14 	sw (sp+20),r23
  c4:	5b 98 00 10 	sw (sp+16),r24
  c8:	5b 99 00 0c 	sw (sp+12),r25
  cc:	5b 9b 00 08 	sw (sp+8),fp
  d0:	5b 9d 00 04 	sw (sp+4),ra
		uart_putstr("\r\n///                                               ///\r");
		uart_putstr("\r\n///              Calculadora 32 bits.             ///\r");
		uart_putstr("\r\n///                                               ///\r");
		uart_putstr("\r\n/// Ejemplo: numero 1 (operador) numero 2 (enter) ///\r");
		uart_putstr("\r\n///                                               ///\r");
		uart_putstr("\r\n/////////////////////////////////////////////////////\r\n\n");
  d4:	34 0f 00 00 	mvi r15,0
		
		// imprimir resultado

		for(i=0;i<10;i++){

			if(error==0){			
  d8:	78 19 3b 9a 	mvhi r25,0x3b9a
	uint8_t ind;
	uint8_t operacion; 
	uint8_t i;
	uint8_t error;

	uart_init();
  dc:	f8 00 01 1d 	calli 550 <uart_init>
		
		// imprimir resultado

		for(i=0;i<10;i++){

			if(error==0){			
  e0:	3b 39 ca 00 	ori r25,r25,0xca00
	uint8_t ind;
	uint8_t operacion; 
	uint8_t i;
	uint8_t error;

	uart_init();
  e4:	78 15 00 00 	mvhi r21,0x0
  e8:	78 11 00 00 	mvhi r17,0x0
  ec:	78 16 00 00 	mvhi r22,0x0
  f0:	78 17 00 00 	mvhi r23,0x0
  f4:	78 18 00 00 	mvhi r24,0x0
                                
			}
			if(temp==enter){
				ind=1;
			}
			if((temp<min_num || temp >max_num) && temp!=enter){
  f8:	34 10 00 0b 	mvi r16,11
  fc:	78 13 00 00 	mvhi r19,0x0
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el segundo número\r\n");
 100:	b9 e0 a0 00 	mv r20,r15
                       			div=div/10;                             
             			}
	             		else{
					uart_putchar(mostrar+const_res);
                  			resultado=resultado-mostrar*div;
                  			div=div/10;     
 104:	34 12 00 0a 	mvi r18,10
 108:	78 1b 00 00 	mvhi fp,0x0
		i=0;
		error=0;

		//Lee el primer numero.

		uart_putstr("\r\n/////////////////////////////////////////////////////\r");
 10c:	ba a0 08 00 	mv r1,r21
 110:	38 21 05 f4 	ori r1,r1,0x5f4
 114:	f8 00 01 29 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n///                                               ///\r");
 118:	ba 20 08 00 	mv r1,r17
 11c:	38 21 06 30 	ori r1,r1,0x630
 120:	f8 00 01 26 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n///              Calculadora 32 bits.             ///\r");
 124:	ba c0 08 00 	mv r1,r22
 128:	38 21 06 6c 	ori r1,r1,0x66c
 12c:	f8 00 01 23 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n///                                               ///\r");
 130:	ba 20 08 00 	mv r1,r17
 134:	38 21 06 30 	ori r1,r1,0x630
 138:	f8 00 01 20 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n/// Ejemplo: numero 1 (operador) numero 2 (enter) ///\r");
 13c:	ba e0 08 00 	mv r1,r23
 140:	38 21 06 a8 	ori r1,r1,0x6a8
 144:	f8 00 01 1d 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n///                                               ///\r");
 148:	ba 20 08 00 	mv r1,r17
 14c:	38 21 06 30 	ori r1,r1,0x630
 150:	f8 00 01 1a 	calli 5b8 <uart_putstr>
		uart_putstr("\r\n/////////////////////////////////////////////////////\r\n\n");
 154:	bb 00 08 00 	mv r1,r24
 158:	38 21 06 e4 	ori r1,r1,0x6e4
 15c:	f8 00 01 17 	calli 5b8 <uart_putstr>
 160:	b9 e0 68 00 	mv r13,r15
 164:	b9 e0 60 00 	mv r12,r15
 168:	b9 e0 70 00 	mv r14,r15
 16c:	e0 00 00 18 	bi 1cc <main+0x140>
				numero_1=numero_1*10+(temp-const_res);

			}
			if(temp==multiplicacion || temp==suma || temp==resta || temp==division){
				operacion=temp;
				uart_putchar(operacion);
 170:	b9 60 08 00 	mv r1,r11
 174:	f8 00 01 08 	calli 594 <uart_putchar>
 178:	b9 60 70 00 	mv r14,r11
 17c:	34 0c 00 01 	mvi r12,1
				ind=1;
			}
			if((temp<min_num || temp>max_num) && temp!=enter && temp!=multiplicacion && temp!=suma && temp!=resta && temp!=division ){
 180:	35 61 ff d1 	addi r1,r11,-47
 184:	20 21 00 ff 	andi r1,r1,0xff
 188:	74 21 00 0b 	cmpgui r1,r1,0xb
 18c:	7d 62 00 0d 	cmpnei r2,r11,13
 190:	a0 22 08 00 	and r1,r1,r2
 194:	64 21 00 00 	cmpei r1,r1,0
 198:	5c 20 00 0b 	bne r1,r0,1c4 <main+0x138>
 19c:	7d 61 00 2a 	cmpnei r1,r11,42
 1a0:	7d 62 00 2b 	cmpnei r2,r11,43
 1a4:	a0 22 08 00 	and r1,r1,r2
 1a8:	64 21 00 00 	cmpei r1,r1,0
 1ac:	5c 20 00 06 	bne r1,r0,1c4 <main+0x138>
 1b0:	7d 62 00 2f 	cmpnei r2,r11,47
 1b4:	7d 61 00 2d 	cmpnei r1,r11,45
 1b8:	a0 22 08 00 	and r1,r1,r2
 1bc:	64 21 00 00 	cmpei r1,r1,0
 1c0:	44 20 00 63 	be r1,r0,34c <main+0x2c0>
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el primer número\r\n");
				numero_1=0;
			}
			
		}
		while(ind==0);
 1c4:	65 81 00 00 	cmpei r1,r12,0
 1c8:	44 20 00 1b 	be r1,r0,234 <main+0x1a8>
		uart_putstr("\r\n///                                               ///\r");
		uart_putstr("\r\n/////////////////////////////////////////////////////\r\n\n");

		do{
		
			temp=uart_getchar();
 1cc:	f8 00 00 e8 	calli 56c <uart_getchar>
		
			if(temp>(min_num) && temp<(max_num)){
 1d0:	34 22 ff d0 	addi r2,r1,-48
 1d4:	20 42 00 ff 	andi r2,r2,0xff
 1d8:	74 42 00 09 	cmpgui r2,r2,0x9
		uart_putstr("\r\n///                                               ///\r");
		uart_putstr("\r\n/////////////////////////////////////////////////////\r\n\n");

		do{
		
			temp=uart_getchar();
 1dc:	b8 20 58 00 	mv r11,r1
		
			if(temp>(min_num) && temp<(max_num)){
 1e0:	44 40 00 0e 	be r2,r0,218 <main+0x18c>
				uart_putchar(temp);
				numero_1=numero_1*10+(temp-const_res);

			}
			if(temp==multiplicacion || temp==suma || temp==resta || temp==division){
 1e4:	35 61 ff d6 	addi r1,r11,-42
 1e8:	20 21 00 ff 	andi r1,r1,0xff
 1ec:	74 21 00 01 	cmpgui r1,r1,0x1
 1f0:	b9 e0 10 00 	mv r2,r15
 1f4:	5c 20 00 02 	bne r1,r0,1fc <main+0x170>
 1f8:	34 02 00 01 	mvi r2,1
 1fc:	65 61 00 2d 	cmpei r1,r11,45
 200:	b8 22 08 00 	or r1,r1,r2
 204:	20 21 00 01 	andi r1,r1,0x1
 208:	5c 20 ff da 	bne r1,r0,170 <main+0xe4>
 20c:	7d 61 00 2f 	cmpnei r1,r11,47
 210:	5c 20 ff dc 	bne r1,r0,180 <main+0xf4>
 214:	e3 ff ff d7 	bi 170 <main+0xe4>
		do{
		
			temp=uart_getchar();
		
			if(temp>(min_num) && temp<(max_num)){
				uart_putchar(temp);
 218:	f8 00 00 df 	calli 594 <uart_putchar>
				numero_1=numero_1*10+(temp-const_res);
 21c:	3d a2 00 03 	sli r2,r13,3
 220:	b5 ad 08 00 	add r1,r13,r13
 224:	b4 22 08 00 	add r1,r1,r2
 228:	b4 2b 08 00 	add r1,r1,r11
 22c:	34 2d ff d0 	addi r13,r1,-48
 230:	e3 ff ff ed 	bi 1e4 <main+0x158>
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el primer número\r\n");
				numero_1=0;
			}
			
		}
		while(ind==0);
 234:	b9 e0 60 00 	mv r12,r15

		//Lee el segundo número.

		do{

			temp=uart_getchar();
 238:	f8 00 00 cd 	calli 56c <uart_getchar>

			if(temp>min_num && temp <max_num){
 23c:	34 22 ff d0 	addi r2,r1,-48
 240:	20 42 00 ff 	andi r2,r2,0xff
 244:	74 42 00 09 	cmpgui r2,r2,0x9

		//Lee el segundo número.

		do{

			temp=uart_getchar();
 248:	b8 20 58 00 	mv r11,r1

			if(temp>min_num && temp <max_num){
 24c:	44 40 00 10 	be r2,r0,28c <main+0x200>
				uart_putchar(temp);
				numero_2=numero_2*10+(temp-const_res);
                                
                                
			}
			if(temp==enter){
 250:	65 62 00 0d 	cmpei r2,r11,13
				ind=1;
			}
			if((temp<min_num || temp >max_num) && temp!=enter){
 254:	35 61 ff d1 	addi r1,r11,-47
 258:	20 21 00 ff 	andi r1,r1,0xff
				uart_putchar(temp);
				numero_2=numero_2*10+(temp-const_res);
                                
                                
			}
			if(temp==enter){
 25c:	5c 40 00 16 	bne r2,r0,2b4 <main+0x228>
				ind=1;
			}
			if((temp<min_num || temp >max_num) && temp!=enter){
 260:	52 01 ff f6 	bgeu r16,r1,238 <main+0x1ac>
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el segundo número\r\n");
 264:	ba 60 08 00 	mv r1,r19
 268:	38 21 07 5c 	ori r1,r1,0x75c
 26c:	f8 00 00 d3 	calli 5b8 <uart_putstr>

		//Lee el segundo número.

		do{

			temp=uart_getchar();
 270:	f8 00 00 bf 	calli 56c <uart_getchar>

			if(temp>min_num && temp <max_num){
 274:	34 22 ff d0 	addi r2,r1,-48
 278:	20 42 00 ff 	andi r2,r2,0xff
 27c:	74 42 00 09 	cmpgui r2,r2,0x9
			}
			if(temp==enter){
				ind=1;
			}
			if((temp<min_num || temp >max_num) && temp!=enter){
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el segundo número\r\n");
 280:	ba 80 60 00 	mv r12,r20

		//Lee el segundo número.

		do{

			temp=uart_getchar();
 284:	b8 20 58 00 	mv r11,r1

			if(temp>min_num && temp <max_num){
 288:	5c 40 ff f2 	bne r2,r0,250 <main+0x1c4>
				uart_putchar(temp);
 28c:	f8 00 00 c2 	calli 594 <uart_putchar>
				numero_2=numero_2*10+(temp-const_res);
 290:	3d 82 00 03 	sli r2,r12,3
 294:	b5 8c 08 00 	add r1,r12,r12
 298:	b4 22 08 00 	add r1,r1,r2
 29c:	b4 2b 08 00 	add r1,r1,r11
                                
                                
			}
			if(temp==enter){
 2a0:	65 62 00 0d 	cmpei r2,r11,13

			temp=uart_getchar();

			if(temp>min_num && temp <max_num){
				uart_putchar(temp);
				numero_2=numero_2*10+(temp-const_res);
 2a4:	34 2c ff d0 	addi r12,r1,-48
                                
			}
			if(temp==enter){
				ind=1;
			}
			if((temp<min_num || temp >max_num) && temp!=enter){
 2a8:	35 61 ff d1 	addi r1,r11,-47
 2ac:	20 21 00 ff 	andi r1,r1,0xff
				uart_putchar(temp);
				numero_2=numero_2*10+(temp-const_res);
                                
                                
			}
			if(temp==enter){
 2b0:	44 40 ff ec 	be r2,r0,260 <main+0x1d4>

		ind=0;

		// switch donde se generan las operaciones segun sea el caso (case)
		
		switch(operacion){  
 2b4:	65 c1 00 2b 	cmpei r1,r14,43
 2b8:	5c 20 00 47 	bne r1,r0,3d4 <main+0x348>
 2bc:	75 c1 00 2b 	cmpgui r1,r14,0x2b
 2c0:	5c 20 00 17 	bne r1,r0,31c <main+0x290>
 2c4:	65 c1 00 2a 	cmpei r1,r14,42
 2c8:	5c 20 00 4c 	bne r1,r0,3f8 <main+0x36c>
			}    
		}
		
		uart_putstr("\r\nOperacion finalizada exitosamente. !\r\n");
	}
}
 2cc:	34 01 00 00 	mvi r1,0
 2d0:	2b 8b 00 44 	lw r11,(sp+68)
 2d4:	2b 8c 00 40 	lw r12,(sp+64)
 2d8:	2b 8d 00 3c 	lw r13,(sp+60)
 2dc:	2b 8e 00 38 	lw r14,(sp+56)
 2e0:	2b 8f 00 34 	lw r15,(sp+52)
 2e4:	2b 90 00 30 	lw r16,(sp+48)
 2e8:	2b 91 00 2c 	lw r17,(sp+44)
 2ec:	2b 92 00 28 	lw r18,(sp+40)
 2f0:	2b 93 00 24 	lw r19,(sp+36)
 2f4:	2b 94 00 20 	lw r20,(sp+32)
 2f8:	2b 95 00 1c 	lw r21,(sp+28)
 2fc:	2b 96 00 18 	lw r22,(sp+24)
 300:	2b 97 00 14 	lw r23,(sp+20)
 304:	2b 98 00 10 	lw r24,(sp+16)
 308:	2b 99 00 0c 	lw r25,(sp+12)
 30c:	2b 9b 00 08 	lw fp,(sp+8)
 310:	2b 9d 00 04 	lw ra,(sp+4)
 314:	37 9c 00 44 	addi sp,sp,68
 318:	c3 a0 00 00 	ret

		ind=0;

		// switch donde se generan las operaciones segun sea el caso (case)
		
		switch(operacion){  
 31c:	65 c1 00 2d 	cmpei r1,r14,45
 320:	5c 20 00 10 	bne r1,r0,360 <main+0x2d4>
 324:	65 c1 00 2f 	cmpei r1,r14,47
 328:	44 20 ff e9 	be r1,r0,2cc <main+0x240>
				uart_putchar(espacio);
				uart_putchar(igual);
				uart_putchar(espacio);
				break;
			case (division):
				if(numero_2==0){
 32c:	5d 80 00 48 	bne r12,r0,44c <main+0x3c0>
					uart_putstr("\r\nError indeterminado, no se puede dividir por cero.\r\n");
 330:	78 01 00 00 	mvhi r1,0x0
 334:	38 21 07 b4 	ori r1,r1,0x7b4
 338:	f8 00 00 a0 	calli 5b8 <uart_putstr>
			else{
				i=10;
			}    
		}
		
		uart_putstr("\r\nOperacion finalizada exitosamente. !\r\n");
 33c:	bb 60 08 00 	mv r1,fp
 340:	38 21 07 ec 	ori r1,r1,0x7ec
 344:	f8 00 00 9d 	calli 5b8 <uart_putstr>
 348:	e3 ff ff 71 	bi 10c <main+0x80>
				operacion=temp;
				uart_putchar(operacion);
				ind=1;
			}
			if((temp<min_num || temp>max_num) && temp!=enter && temp!=multiplicacion && temp!=suma && temp!=resta && temp!=division ){
				uart_putstr("\r\nCaracter no válido ingrese de nuevo el primer número\r\n");
 34c:	78 01 00 00 	mvhi r1,0x0
 350:	38 21 07 20 	ori r1,r1,0x720
 354:	f8 00 00 99 	calli 5b8 <uart_putstr>
 358:	b9 e0 68 00 	mv r13,r15
 35c:	e3 ff ff 9a 	bi 1c4 <main+0x138>
		// switch donde se generan las operaciones segun sea el caso (case)
		
		switch(operacion){  

			case (resta):
				if(numero_1>=numero_2){
 360:	55 8d 00 2f 	bgu r12,r13,41c <main+0x390>
					resultado=numero_1-numero_2;
					uart_putchar(espacio);
 364:	34 01 00 20 	mvi r1,32
 368:	f8 00 00 8b 	calli 594 <uart_putchar>
					uart_putchar(igual);
 36c:	34 01 00 3d 	mvi r1,61
 370:	f8 00 00 89 	calli 594 <uart_putchar>
					uart_putchar(espacio);
 374:	34 01 00 20 	mvi r1,32
 378:	f8 00 00 87 	calli 594 <uart_putchar>
		
		switch(operacion){  

			case (resta):
				if(numero_1>=numero_2){
					resultado=numero_1-numero_2;
 37c:	c9 ac 68 00 	sub r13,r13,r12
					uart_putchar(espacio);
					uart_putchar(igual);
					uart_putchar(espacio);
 380:	b9 e0 08 00 	mv r1,r15
		
		// imprimir resultado

		for(i=0;i<10;i++){

			if(error==0){			
 384:	b8 20 70 00 	mv r14,r1
 388:	bb 20 60 00 	mv r12,r25
 38c:	e0 00 00 02 	bi 394 <main+0x308>

		} 
		
		// imprimir resultado

		for(i=0;i<10;i++){
 390:	44 40 ff eb 	be r2,r0,33c <main+0x2b0>

			if(error==0){			

             			mostrar=resultado/div;   
 394:	8d ac 58 00 	divu r11,r13,r12
             
             			if(mostrar<1 && mostrar>0){
                       			div=div/10;                             
             			}
	             		else{
					uart_putchar(mostrar+const_res);
 398:	35 61 00 30 	addi r1,r11,48
 39c:	20 21 00 ff 	andi r1,r1,0xff
 3a0:	f8 00 00 7d 	calli 594 <uart_putchar>
                  			resultado=resultado-mostrar*div;
 3a4:	89 6c 58 00 	mul r11,r11,r12
                  			div=div/10;     
 3a8:	8d 92 60 00 	divu r12,r12,r18

		} 
		
		// imprimir resultado

		for(i=0;i<10;i++){
 3ac:	35 c1 00 01 	addi r1,r14,1
 3b0:	20 2e 00 ff 	andi r14,r1,0xff
	             		else{
					uart_putchar(mostrar+const_res);
                  			resultado=resultado-mostrar*div;
                  			div=div/10;     
             			}
             			if(div==1){
 3b4:	7d 81 00 01 	cmpnei r1,r12,1

		} 
		
		// imprimir resultado

		for(i=0;i<10;i++){
 3b8:	7d c2 00 0a 	cmpnei r2,r14,10
             			if(mostrar<1 && mostrar>0){
                       			div=div/10;                             
             			}
	             		else{
					uart_putchar(mostrar+const_res);
                  			resultado=resultado-mostrar*div;
 3bc:	c9 ab 68 00 	sub r13,r13,r11
                  			div=div/10;     
             			}
             			if(div==1){
 3c0:	5c 20 ff f4 	bne r1,r0,390 <main+0x304>
                        	    	uart_putchar(resultado+const_res);
 3c4:	35 a1 00 30 	addi r1,r13,48
 3c8:	20 21 00 ff 	andi r1,r1,0xff
 3cc:	f8 00 00 72 	calli 594 <uart_putchar>
 3d0:	e3 ff ff db 	bi 33c <main+0x2b0>
					error=0;
				}
				break;
			case (suma):
				resultado=numero_1+numero_2;
				uart_putchar(espacio);
 3d4:	34 01 00 20 	mvi r1,32
 3d8:	f8 00 00 6f 	calli 594 <uart_putchar>
				uart_putchar(igual);
 3dc:	34 01 00 3d 	mvi r1,61
 3e0:	f8 00 00 6d 	calli 594 <uart_putchar>
				uart_putchar(espacio);
 3e4:	34 01 00 20 	mvi r1,32
 3e8:	f8 00 00 6b 	calli 594 <uart_putchar>
					uart_putstr("\r\nEs un valor negativo\r\n");
					error=0;
				}
				break;
			case (suma):
				resultado=numero_1+numero_2;
 3ec:	b5 8d 68 00 	add r13,r12,r13
				uart_putchar(espacio);
				uart_putchar(igual);
				uart_putchar(espacio);
 3f0:	b9 e0 08 00 	mv r1,r15
 3f4:	e3 ff ff e4 	bi 384 <main+0x2f8>
				break;
			case (multiplicacion):
				resultado=numero_1*numero_2;
				uart_putchar(espacio);
 3f8:	34 01 00 20 	mvi r1,32
 3fc:	f8 00 00 66 	calli 594 <uart_putchar>
				uart_putchar(igual);
 400:	34 01 00 3d 	mvi r1,61
 404:	f8 00 00 64 	calli 594 <uart_putchar>
				uart_putchar(espacio);
 408:	34 01 00 20 	mvi r1,32
				uart_putchar(espacio);
				uart_putchar(igual);
				uart_putchar(espacio);
				break;
			case (multiplicacion):
				resultado=numero_1*numero_2;
 40c:	89 8d 68 00 	mul r13,r12,r13
				uart_putchar(espacio);
				uart_putchar(igual);
				uart_putchar(espacio);
 410:	f8 00 00 61 	calli 594 <uart_putchar>
 414:	b9 e0 08 00 	mv r1,r15
 418:	e3 ff ff db 	bi 384 <main+0x2f8>
					uart_putchar(igual);
					uart_putchar(espacio);
				}
				else{
					resultado=numero_2-numero_1;
					uart_putchar(espacio);
 41c:	34 01 00 20 	mvi r1,32
 420:	f8 00 00 5d 	calli 594 <uart_putchar>
					uart_putchar(igual);
 424:	34 01 00 3d 	mvi r1,61
 428:	f8 00 00 5b 	calli 594 <uart_putchar>
					uart_putchar(espacio);
 42c:	34 01 00 20 	mvi r1,32
 430:	f8 00 00 59 	calli 594 <uart_putchar>
					uart_putstr("\r\nEs un valor negativo\r\n");
 434:	78 01 00 00 	mvhi r1,0x0
 438:	38 21 07 98 	ori r1,r1,0x798
 43c:	f8 00 00 5f 	calli 5b8 <uart_putstr>
					uart_putchar(espacio);
					uart_putchar(igual);
					uart_putchar(espacio);
				}
				else{
					resultado=numero_2-numero_1;
 440:	c9 8d 68 00 	sub r13,r12,r13
					uart_putchar(espacio);
					uart_putchar(igual);
					uart_putchar(espacio);
					uart_putstr("\r\nEs un valor negativo\r\n");
 444:	b9 e0 08 00 	mv r1,r15
 448:	e3 ff ff cf 	bi 384 <main+0x2f8>
					uart_putstr("\r\nError indeterminado, no se puede dividir por cero.\r\n");
					error=1;
				}
				else{
					resultado=numero_1/numero_2;
					uart_putchar(espacio);
 44c:	34 01 00 20 	mvi r1,32
 450:	f8 00 00 51 	calli 594 <uart_putchar>
					uart_putchar(igual);
 454:	34 01 00 3d 	mvi r1,61
 458:	f8 00 00 4f 	calli 594 <uart_putchar>
					uart_putchar(espacio);
 45c:	34 01 00 20 	mvi r1,32
 460:	f8 00 00 4d 	calli 594 <uart_putchar>
				if(numero_2==0){
					uart_putstr("\r\nError indeterminado, no se puede dividir por cero.\r\n");
					error=1;
				}
				else{
					resultado=numero_1/numero_2;
 464:	8d ac 68 00 	divu r13,r13,r12
					uart_putchar(espacio);
					uart_putchar(igual);
					uart_putchar(espacio);
 468:	b9 e0 08 00 	mv r1,r15
 46c:	e3 ff ff c6 	bi 384 <main+0x2f8>

00000470 <read_sw>:
uint32_t msec = 0;

/***************************************************************************
 * General utility functions
 */
int read_sw(){
 470:	78 01 00 00 	mvhi r1,0x0
 474:	38 21 08 20 	ori r1,r1,0x820
 478:	28 23 00 00 	lw r3,(r1+0)
 47c:	34 02 00 10 	mvi r2,16
 480:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x10;
	return gpio0->in;
 484:	28 61 00 10 	lw r1,(r3+16)
}
 488:	c3 a0 00 00 	ret

0000048c <show_char>:

void show_char(char ascii){
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 08 20 	ori r2,r2,0x820
 494:	28 43 00 00 	lw r3,(r2+0)
 498:	34 02 00 14 	mvi r2,20
 49c:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->ctrl = 0x14;
 4a0:	58 62 00 00 	sw (r3+0),r2
	gpio0->out = ascii;
 4a4:	58 61 00 14 	sw (r3+20),r1
}
 4a8:	c3 a0 00 00 	ret

000004ac <show_led>:

void show_led(int led){
 4ac:	78 02 00 00 	mvhi r2,0x0
 4b0:	38 42 08 20 	ori r2,r2,0x820
 4b4:	28 43 00 00 	lw r3,(r2+0)
 4b8:	34 02 00 14 	mvi r2,20
 4bc:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x14;
	gpio0->out = led;
 4c0:	58 61 00 14 	sw (r3+20),r1
}
 4c4:	c3 a0 00 00 	ret

000004c8 <show_number>:

void show_number(int numero){
 4c8:	78 02 00 00 	mvhi r2,0x0
 4cc:	38 42 08 24 	ori r2,r2,0x824
 4d0:	28 43 00 00 	lw r3,(r2+0)
 4d4:	34 02 00 10 	mvi r2,16
 4d8:	58 62 00 00 	sw (r3+0),r2

	bcd0->ctrl = 0x10;
	bcd0->number = numero;
 4dc:	58 61 00 10 	sw (r3+16),r1
}
 4e0:	c3 a0 00 00 	ret

000004e4 <sleep>:

void sleep(int msec)
{
 4e4:	78 03 00 00 	mvhi r3,0x0
 4e8:	78 02 00 01 	mvhi r2,0x1
 4ec:	38 42 86 a0 	ori r2,r2,0x86a0
 4f0:	38 63 08 1c 	ori r3,r3,0x81c
 4f4:	88 22 08 00 	mul r1,r1,r2
 4f8:	28 63 00 00 	lw r3,(r3+0)
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 4fc:	34 02 00 0a 	mvi r2,10
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 500:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 504:	34 01 00 00 	mvi r1,0
 508:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 50c:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 510:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 514:	20 21 00 01 	andi r1,r1,0x1
 518:	64 21 00 00 	cmpei r1,r1,0
 51c:	5c 20 ff fd 	bne r1,r0,510 <sleep+0x2c>
}
 520:	c3 a0 00 00 	ret

00000524 <tic_init>:

void tic_init()
{
 524:	78 01 00 00 	mvhi r1,0x0
 528:	38 21 08 1c 	ori r1,r1,0x81c
 52c:	28 23 00 00 	lw r3,(r1+0)
 530:	78 02 00 01 	mvhi r2,0x1
 534:	38 42 86 a0 	ori r2,r2,0x86a0
 538:	58 62 00 04 	sw (r3+4),r2
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
	timer0->counter0 = 0;
 53c:	34 01 00 00 	mvi r1,0
 540:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 544:	34 02 00 0e 	mvi r2,14
 548:	58 62 00 00 	sw (r3+0),r2
}
 54c:	c3 a0 00 00 	ret

00000550 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 550:	c3 a0 00 00 	ret

00000554 <uart_read>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_read()
{   
 554:	78 01 00 00 	mvhi r1,0x0
 558:	38 21 08 18 	ori r1,r1,0x818
 55c:	28 22 00 00 	lw r2,(r1+0)
 560:	28 41 00 04 	lw r1,(r2+4)
	return uart0->rxtx;
}
 564:	20 21 00 ff 	andi r1,r1,0xff
 568:	c3 a0 00 00 	ret

0000056c <uart_getchar>:
char uart_getchar()
{   
 56c:	78 01 00 00 	mvhi r1,0x0
 570:	38 21 08 18 	ori r1,r1,0x818
 574:	28 22 00 00 	lw r2,(r1+0)
 578:	28 41 00 00 	lw r1,(r2+0)
 57c:	20 21 00 01 	andi r1,r1,0x1
 580:	64 21 00 00 	cmpei r1,r1,0
 584:	5c 20 ff fd 	bne r1,r0,578 <uart_getchar+0xc>
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 588:	28 41 00 04 	lw r1,(r2+4)
}
 58c:	20 21 00 ff 	andi r1,r1,0xff
 590:	c3 a0 00 00 	ret

00000594 <uart_putchar>:

void uart_putchar(char c)
{
 594:	78 02 00 00 	mvhi r2,0x0
 598:	38 42 08 18 	ori r2,r2,0x818
 59c:	28 42 00 00 	lw r2,(r2+0)
 5a0:	20 23 00 ff 	andi r3,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5a4:	28 41 00 00 	lw r1,(r2+0)
 5a8:	20 21 00 10 	andi r1,r1,0x10
 5ac:	5c 20 ff fe 	bne r1,r0,5a4 <uart_putchar+0x10>
	uart0->rxtx = c;
 5b0:	58 43 00 04 	sw (r2+4),r3
}
 5b4:	c3 a0 00 00 	ret

000005b8 <uart_putstr>:

void uart_putstr(char *str)
{
 5b8:	37 9c ff f8 	addi sp,sp,-8
 5bc:	5b 8b 00 08 	sw (sp+8),r11
 5c0:	5b 9d 00 04 	sw (sp+4),ra
 5c4:	b8 20 10 00 	mv r2,r1
	char *c = str;
	while(*c) {
 5c8:	40 21 00 00 	lbu r1,(r1+0)
 5cc:	44 20 00 06 	be r1,r0,5e4 <uart_putstr+0x2c>
 5d0:	b8 40 58 00 	mv r11,r2
		uart_putchar(*c);
		c++;
 5d4:	35 6b 00 01 	addi r11,r11,1

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
 5d8:	fb ff ff ef 	calli 594 <uart_putchar>
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5dc:	41 61 00 00 	lbu r1,(r11+0)
 5e0:	5c 20 ff fd 	bne r1,r0,5d4 <uart_putstr+0x1c>
		uart_putchar(*c);
		c++;
	}
}
 5e4:	2b 8b 00 08 	lw r11,(sp+8)
 5e8:	2b 9d 00 04 	lw ra,(sp+4)
 5ec:	37 9c 00 08 	addi sp,sp,8
 5f0:	c3 a0 00 00 	ret
