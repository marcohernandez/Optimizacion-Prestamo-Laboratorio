
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000074  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000014  00000240  00000240  000002b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000254  00000254  000002c8  2**2
                  ALLOC
  3 .debug_abbrev 00000175  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004bd  00000000  00000000  0000043d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028c  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000000a6  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000113  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c0  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000005a  00000000  00000000  00001031  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 02 60 	ori gp,gp,0x260
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 02 54 	ori r1,r1,0x254
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 02 58 	ori r3,r3,0x258

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 0c 	calli 8c <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <main>:
#include "soc-hw.h"

int main (int argc, char **argv){
  8c:	37 9c ff fc 	addi sp,sp,-4
  90:	5b 9d 00 04 	sw (sp+4),ra

	int number = 0;

	for(;;){
		number = read_number();
  94:	f8 00 00 03 	calli a0 <read_number>

		show_number(number);
  98:	f8 00 00 09 	calli bc <show_number>
  9c:	e3 ff ff fe 	bi 94 <main+0x8>

000000a0 <read_number>:
uint32_t msec = 0;

/***************************************************************************
 * General utility functions
 */
int read_number(){
  a0:	78 01 00 00 	mvhi r1,0x0
  a4:	38 21 02 40 	ori r1,r1,0x240
  a8:	28 23 00 00 	lw r3,(r1+0)
  ac:	34 02 00 10 	mvi r2,16
  b0:	58 62 00 00 	sw (r3+0),r2

	key0->ctrl = 0x10;
	return key0->incode;
  b4:	28 61 00 10 	lw r1,(r3+16)
}
  b8:	c3 a0 00 00 	ret

000000bc <show_number>:

void show_number(int numero){
  bc:	78 02 00 00 	mvhi r2,0x0
  c0:	38 42 02 44 	ori r2,r2,0x244
  c4:	28 43 00 00 	lw r3,(r2+0)
  c8:	34 02 00 10 	mvi r2,16
  cc:	58 62 00 00 	sw (r3+0),r2

	bcd0->ctrl = 0x10;
	bcd0->number = numero;
  d0:	58 61 00 10 	sw (r3+16),r1
}
  d4:	c3 a0 00 00 	ret

000000d8 <read_sw>:

int read_sw(){
  d8:	78 01 00 00 	mvhi r1,0x0
  dc:	38 21 02 50 	ori r1,r1,0x250
  e0:	28 23 00 00 	lw r3,(r1+0)
  e4:	34 02 00 10 	mvi r2,16
  e8:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x10;
	return gpio0->in;
  ec:	28 61 00 10 	lw r1,(r3+16)
}
  f0:	c3 a0 00 00 	ret

000000f4 <show_char>:

void show_char(char ascii){
  f4:	78 02 00 00 	mvhi r2,0x0
  f8:	38 42 02 50 	ori r2,r2,0x250
  fc:	28 43 00 00 	lw r3,(r2+0)
 100:	34 02 00 14 	mvi r2,20
 104:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->ctrl = 0x14;
 108:	58 62 00 00 	sw (r3+0),r2
	gpio0->out = ascii;
 10c:	58 61 00 14 	sw (r3+20),r1
}
 110:	c3 a0 00 00 	ret

00000114 <show_led>:

void show_led(int led){
 114:	78 02 00 00 	mvhi r2,0x0
 118:	38 42 02 50 	ori r2,r2,0x250
 11c:	28 43 00 00 	lw r3,(r2+0)
 120:	34 02 00 14 	mvi r2,20
 124:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x14;
	gpio0->out = led;
 128:	58 61 00 14 	sw (r3+20),r1
}
 12c:	c3 a0 00 00 	ret

00000130 <sleep>:

void sleep(int msec)
{
 130:	78 03 00 00 	mvhi r3,0x0
 134:	78 02 00 01 	mvhi r2,0x1
 138:	38 42 86 a0 	ori r2,r2,0x86a0
 13c:	38 63 02 4c 	ori r3,r3,0x24c
 140:	88 22 08 00 	mul r1,r1,r2
 144:	28 63 00 00 	lw r3,(r3+0)
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 148:	34 02 00 0a 	mvi r2,10
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 14c:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 150:	34 01 00 00 	mvi r1,0
 154:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 158:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 15c:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 160:	20 21 00 01 	andi r1,r1,0x1
 164:	64 21 00 00 	cmpei r1,r1,0
 168:	5c 20 ff fd 	bne r1,r0,15c <sleep+0x2c>
}
 16c:	c3 a0 00 00 	ret

00000170 <tic_init>:

void tic_init()
{
 170:	78 01 00 00 	mvhi r1,0x0
 174:	38 21 02 4c 	ori r1,r1,0x24c
 178:	28 23 00 00 	lw r3,(r1+0)
 17c:	78 02 00 01 	mvhi r2,0x1
 180:	38 42 86 a0 	ori r2,r2,0x86a0
 184:	58 62 00 04 	sw (r3+4),r2
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
	timer0->counter0 = 0;
 188:	34 01 00 00 	mvi r1,0
 18c:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 190:	34 02 00 0e 	mvi r2,14
 194:	58 62 00 00 	sw (r3+0),r2
}
 198:	c3 a0 00 00 	ret

0000019c <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 19c:	c3 a0 00 00 	ret

000001a0 <uart_read>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_read()
{   
 1a0:	78 01 00 00 	mvhi r1,0x0
 1a4:	38 21 02 48 	ori r1,r1,0x248
 1a8:	28 22 00 00 	lw r2,(r1+0)
 1ac:	28 41 00 04 	lw r1,(r2+4)
	return uart0->rxtx;
}
 1b0:	20 21 00 ff 	andi r1,r1,0xff
 1b4:	c3 a0 00 00 	ret

000001b8 <uart_getchar>:
char uart_getchar()
{   
 1b8:	78 01 00 00 	mvhi r1,0x0
 1bc:	38 21 02 48 	ori r1,r1,0x248
 1c0:	28 22 00 00 	lw r2,(r1+0)
 1c4:	28 41 00 00 	lw r1,(r2+0)
 1c8:	20 21 00 01 	andi r1,r1,0x1
 1cc:	64 21 00 00 	cmpei r1,r1,0
 1d0:	5c 20 ff fd 	bne r1,r0,1c4 <uart_getchar+0xc>
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 1d4:	28 41 00 04 	lw r1,(r2+4)
}
 1d8:	20 21 00 ff 	andi r1,r1,0xff
 1dc:	c3 a0 00 00 	ret

000001e0 <uart_putchar>:

void uart_putchar(char c)
{
 1e0:	78 02 00 00 	mvhi r2,0x0
 1e4:	38 42 02 48 	ori r2,r2,0x248
 1e8:	28 42 00 00 	lw r2,(r2+0)
 1ec:	20 23 00 ff 	andi r3,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 1f0:	28 41 00 00 	lw r1,(r2+0)
 1f4:	20 21 00 10 	andi r1,r1,0x10
 1f8:	5c 20 ff fe 	bne r1,r0,1f0 <uart_putchar+0x10>
	uart0->rxtx = c;
 1fc:	58 43 00 04 	sw (r2+4),r3
}
 200:	c3 a0 00 00 	ret

00000204 <uart_putstr>:

void uart_putstr(char *str)
{
 204:	37 9c ff f8 	addi sp,sp,-8
 208:	5b 8b 00 08 	sw (sp+8),r11
 20c:	5b 9d 00 04 	sw (sp+4),ra
 210:	b8 20 10 00 	mv r2,r1
	char *c = str;
	while(*c) {
 214:	40 21 00 00 	lbu r1,(r1+0)
 218:	44 20 00 06 	be r1,r0,230 <uart_putstr+0x2c>
 21c:	b8 40 58 00 	mv r11,r2
		uart_putchar(*c);
		c++;
 220:	35 6b 00 01 	addi r11,r11,1

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
 224:	fb ff ff ef 	calli 1e0 <uart_putchar>
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 228:	41 61 00 00 	lbu r1,(r11+0)
 22c:	5c 20 ff fd 	bne r1,r0,220 <uart_putstr+0x1c>
		uart_putchar(*c);
		c++;
	}
}
 230:	2b 8b 00 08 	lw r11,(sp+8)
 234:	2b 9d 00 04 	lw ra,(sp+4)
 238:	37 9c 00 08 	addi sp,sp,8
 23c:	c3 a0 00 00 	ret
