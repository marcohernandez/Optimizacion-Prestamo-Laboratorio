
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000074  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000018  000002ec  000002ec  00000360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000304  00000304  00000378  2**2
                  ALLOC
  3 .debug_abbrev 000001ad  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000058d  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000344  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000100  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000000fb  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000138  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000202  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000005a  00000000  00000000  0000136d  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 03 10 	ori gp,gp,0x310
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 03 04 	ori r1,r1,0x304
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 03 08 	ori r3,r3,0x308

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 0c 	calli 8c <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <main>:
#include "soc-hw.h"

int main (int argc, char **argv){
  8c:	37 9c ff e8 	addi sp,sp,-24
  90:	5b 8b 00 18 	sw (sp+24),r11
  94:	5b 8c 00 14 	sw (sp+20),r12
  98:	5b 8d 00 10 	sw (sp+16),r13
  9c:	5b 8e 00 0c 	sw (sp+12),r14
  a0:	5b 8f 00 08 	sw (sp+8),r15
  a4:	5b 9d 00 04 	sw (sp+4),ra
  a8:	34 0b 00 00 	mvi r11,0
  ac:	b9 60 60 00 	mv r12,r11
  b0:	b9 60 70 00 	mv r14,r11
  b4:	34 0d 00 01 	mvi r13,1
  b8:	b9 60 78 00 	mv r15,r11
	int dif = 0;
	int val = 1;

	for(;;){

		code = scan_code_keyboard();
  bc:	f8 00 00 1d 	calli 130 <scan_code_keyboard>
  c0:	b8 20 20 00 	mv r4,r1
		if (code == 42){
			corte = 1;
			dif = 0;
		}
		else {	
			if (corte == 1 && dif == 0){
  c4:	65 62 00 00 	cmpei r2,r11,0
  c8:	65 83 00 01 	cmpei r3,r12,1

	for(;;){

		code = scan_code_keyboard();

		if (code == 42){
  cc:	64 21 00 2a 	cmpei r1,r1,42
			corte = 1;
			dif = 0;
		}
		else {	
			if (corte == 1 && dif == 0){
  d0:	a0 62 10 00 	and r2,r3,r2

	for(;;){

		code = scan_code_keyboard();

		if (code == 42){
  d4:	5c 20 00 10 	bne r1,r0,114 <main+0x88>
		}
		else {	
			if (corte == 1 && dif == 0){
				esp = 1;
			}		
			if (corte == 1 && esp == 0){
  d8:	64 61 00 00 	cmpei r1,r3,0
		if (code == 42){
			corte = 1;
			dif = 0;
		}
		else {	
			if (corte == 1 && dif == 0){
  dc:	5c 40 00 06 	bne r2,r0,f4 <main+0x68>
				esp = 1;
			}		
			if (corte == 1 && esp == 0){
  e0:	5c 20 00 05 	bne r1,r0,f4 <main+0x68>
				if (val == 1){
					val = 0;
				}				
				else {
					uart_putchar(code);
  e4:	20 81 00 ff 	andi r1,r4,0xff
		else {	
			if (corte == 1 && dif == 0){
				esp = 1;
			}		
			if (corte == 1 && esp == 0){
				if (val == 1){
  e8:	b9 c0 60 00 	mv r12,r14
  ec:	5d c0 00 0d 	bne r14,r0,120 <main+0x94>
  f0:	b9 a0 70 00 	mv r14,r13
					val = 0;
				}				
				else {
					uart_putchar(code);
  f4:	b9 a0 58 00 	mv r11,r13
	int dif = 0;
	int val = 1;

	for(;;){

		code = scan_code_keyboard();
  f8:	f8 00 00 0e 	calli 130 <scan_code_keyboard>
  fc:	b8 20 20 00 	mv r4,r1
		if (code == 42){
			corte = 1;
			dif = 0;
		}
		else {	
			if (corte == 1 && dif == 0){
 100:	65 62 00 00 	cmpei r2,r11,0
 104:	65 83 00 01 	cmpei r3,r12,1

	for(;;){

		code = scan_code_keyboard();

		if (code == 42){
 108:	64 21 00 2a 	cmpei r1,r1,42
			corte = 1;
			dif = 0;
		}
		else {	
			if (corte == 1 && dif == 0){
 10c:	a0 62 10 00 	and r2,r3,r2

	for(;;){

		code = scan_code_keyboard();

		if (code == 42){
 110:	44 20 ff f2 	be r1,r0,d8 <main+0x4c>
#include "soc-hw.h"

int main (int argc, char **argv){
 114:	b9 a0 60 00 	mv r12,r13
 118:	b9 e0 58 00 	mv r11,r15
 11c:	e3 ff ff e8 	bi bc <main+0x30>
			if (corte == 1 && esp == 0){
				if (val == 1){
					val = 0;
				}				
				else {
					uart_putchar(code);
 120:	f8 00 00 5b 	calli 28c <uart_putchar>
 124:	b9 e0 60 00 	mv r12,r15
 128:	b9 a0 58 00 	mv r11,r13
 12c:	e3 ff ff f3 	bi f8 <main+0x6c>

00000130 <scan_code_keyboard>:
uint32_t msec = 0;

/***************************************************************************
 * General utility functions
 */
int scan_code_keyboard(){
 130:	78 01 00 00 	mvhi r1,0x0
 134:	38 21 03 00 	ori r1,r1,0x300
 138:	28 23 00 00 	lw r3,(r1+0)
 13c:	34 02 00 10 	mvi r2,16
 140:	58 62 00 00 	sw (r3+0),r2

	keyboard0->ctrl = 0x10;
	return keyboard0->scancode;
 144:	28 61 00 10 	lw r1,(r3+16)
}
 148:	c3 a0 00 00 	ret

0000014c <read_number>:

int read_number(){
 14c:	78 01 00 00 	mvhi r1,0x0
 150:	38 21 02 ec 	ori r1,r1,0x2ec
 154:	28 23 00 00 	lw r3,(r1+0)
 158:	34 02 00 10 	mvi r2,16
 15c:	58 62 00 00 	sw (r3+0),r2

	key0->ctrl = 0x10;
	return key0->incode;
 160:	28 61 00 10 	lw r1,(r3+16)
}
 164:	c3 a0 00 00 	ret

00000168 <show_number>:

void show_number(int numero){
 168:	78 02 00 00 	mvhi r2,0x0
 16c:	38 42 02 f0 	ori r2,r2,0x2f0
 170:	28 43 00 00 	lw r3,(r2+0)
 174:	34 02 00 10 	mvi r2,16
 178:	58 62 00 00 	sw (r3+0),r2

	bcd0->ctrl = 0x10;
	bcd0->number = numero;
 17c:	58 61 00 10 	sw (r3+16),r1
}
 180:	c3 a0 00 00 	ret

00000184 <read_sw>:

int read_sw(){
 184:	78 01 00 00 	mvhi r1,0x0
 188:	38 21 02 fc 	ori r1,r1,0x2fc
 18c:	28 23 00 00 	lw r3,(r1+0)
 190:	34 02 00 10 	mvi r2,16
 194:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x10;
	return gpio0->in;
 198:	28 61 00 10 	lw r1,(r3+16)
}
 19c:	c3 a0 00 00 	ret

000001a0 <show_char>:

void show_char(char ascii){
 1a0:	78 02 00 00 	mvhi r2,0x0
 1a4:	38 42 02 fc 	ori r2,r2,0x2fc
 1a8:	28 43 00 00 	lw r3,(r2+0)
 1ac:	34 02 00 14 	mvi r2,20
 1b0:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->ctrl = 0x14;
 1b4:	58 62 00 00 	sw (r3+0),r2
	gpio0->out = ascii;
 1b8:	58 61 00 14 	sw (r3+20),r1
}
 1bc:	c3 a0 00 00 	ret

000001c0 <show_led>:

void show_led(int led){
 1c0:	78 02 00 00 	mvhi r2,0x0
 1c4:	38 42 02 fc 	ori r2,r2,0x2fc
 1c8:	28 43 00 00 	lw r3,(r2+0)
 1cc:	34 02 00 14 	mvi r2,20
 1d0:	58 62 00 00 	sw (r3+0),r2
	gpio0->ctrl = 0x14;
	gpio0->out = led;
 1d4:	58 61 00 14 	sw (r3+20),r1
}
 1d8:	c3 a0 00 00 	ret

000001dc <sleep>:

void sleep(int msec)
{
 1dc:	78 03 00 00 	mvhi r3,0x0
 1e0:	78 02 00 01 	mvhi r2,0x1
 1e4:	38 42 86 a0 	ori r2,r2,0x86a0
 1e8:	38 63 02 f8 	ori r3,r3,0x2f8
 1ec:	88 22 08 00 	mul r1,r1,r2
 1f0:	28 63 00 00 	lw r3,(r3+0)
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 1f4:	34 02 00 0a 	mvi r2,10
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 1f8:	58 61 00 10 	sw (r3+16),r1
	timer0->counter1 = 0;
 1fc:	34 01 00 00 	mvi r1,0
 200:	58 61 00 14 	sw (r3+20),r1
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 204:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
 		tcr = timer0->tcr1;
 208:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 20c:	20 21 00 01 	andi r1,r1,0x1
 210:	64 21 00 00 	cmpei r1,r1,0
 214:	5c 20 ff fd 	bne r1,r0,208 <sleep+0x2c>
}
 218:	c3 a0 00 00 	ret

0000021c <tic_init>:

void tic_init()
{
 21c:	78 01 00 00 	mvhi r1,0x0
 220:	38 21 02 f8 	ori r1,r1,0x2f8
 224:	28 23 00 00 	lw r3,(r1+0)
 228:	78 02 00 01 	mvhi r2,0x1
 22c:	38 42 86 a0 	ori r2,r2,0x86a0
 230:	58 62 00 04 	sw (r3+4),r2
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
	timer0->counter0 = 0;
 234:	34 01 00 00 	mvi r1,0
 238:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 23c:	34 02 00 0e 	mvi r2,14
 240:	58 62 00 00 	sw (r3+0),r2
}
 244:	c3 a0 00 00 	ret

00000248 <uart_init>:

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
 248:	c3 a0 00 00 	ret

0000024c <uart_read>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_read()
{   
 24c:	78 01 00 00 	mvhi r1,0x0
 250:	38 21 02 f4 	ori r1,r1,0x2f4
 254:	28 22 00 00 	lw r2,(r1+0)
 258:	28 41 00 04 	lw r1,(r2+4)
	return uart0->rxtx;
}
 25c:	20 21 00 ff 	andi r1,r1,0xff
 260:	c3 a0 00 00 	ret

00000264 <uart_getchar>:
char uart_getchar()
{   
 264:	78 01 00 00 	mvhi r1,0x0
 268:	38 21 02 f4 	ori r1,r1,0x2f4
 26c:	28 22 00 00 	lw r2,(r1+0)
 270:	28 41 00 00 	lw r1,(r2+0)
 274:	20 21 00 01 	andi r1,r1,0x1
 278:	64 21 00 00 	cmpei r1,r1,0
 27c:	5c 20 ff fd 	bne r1,r0,270 <uart_getchar+0xc>
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 280:	28 41 00 04 	lw r1,(r2+4)
}
 284:	20 21 00 ff 	andi r1,r1,0xff
 288:	c3 a0 00 00 	ret

0000028c <uart_putchar>:

void uart_putchar(char c)
{
 28c:	78 02 00 00 	mvhi r2,0x0
 290:	38 42 02 f4 	ori r2,r2,0x2f4
 294:	28 42 00 00 	lw r2,(r2+0)
 298:	20 23 00 ff 	andi r3,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 29c:	28 41 00 00 	lw r1,(r2+0)
 2a0:	20 21 00 10 	andi r1,r1,0x10
 2a4:	5c 20 ff fe 	bne r1,r0,29c <uart_putchar+0x10>
	uart0->rxtx = c;
 2a8:	58 43 00 04 	sw (r2+4),r3
}
 2ac:	c3 a0 00 00 	ret

000002b0 <uart_putstr>:

void uart_putstr(char *str)
{
 2b0:	37 9c ff f8 	addi sp,sp,-8
 2b4:	5b 8b 00 08 	sw (sp+8),r11
 2b8:	5b 9d 00 04 	sw (sp+4),ra
 2bc:	b8 20 10 00 	mv r2,r1
	char *c = str;
	while(*c) {
 2c0:	40 21 00 00 	lbu r1,(r1+0)
 2c4:	44 20 00 06 	be r1,r0,2dc <uart_putstr+0x2c>
 2c8:	b8 40 58 00 	mv r11,r2
		uart_putchar(*c);
		c++;
 2cc:	35 6b 00 01 	addi r11,r11,1

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
 2d0:	fb ff ff ef 	calli 28c <uart_putchar>
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 2d4:	41 61 00 00 	lbu r1,(r11+0)
 2d8:	5c 20 ff fd 	bne r1,r0,2cc <uart_putstr+0x1c>
		uart_putchar(*c);
		c++;
	}
}
 2dc:	2b 8b 00 08 	lw r11,(sp+8)
 2e0:	2b 9d 00 04 	lw ra,(sp+4)
 2e4:	37 9c 00 08 	addi sp,sp,8
 2e8:	c3 a0 00 00 	ret
